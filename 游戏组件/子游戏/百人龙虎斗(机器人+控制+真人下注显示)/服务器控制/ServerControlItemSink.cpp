#include "StdAfx.h"
#include "servercontrolitemsink.h"

//////////////////////////////////////////////////////////////////////////
//替代结构
struct tagReplaceCard
{
	BYTE							cbCardCount[2];						//扑克数目
	BYTE							cbTableCardArray[2][3];				//桌面扑克
};

//2-6
tagReplaceCard CardBankerWinCard[]=
{
	1,1,0x25,0x31,0x00,0x01,0x02,0x04,
		1,1,0x03,0x22,0x32,0x01,0x02,0x03,
		1,1,0x14,0x23,0x2c,0x01,0x02,0x0a,
		1,1,0x23,0x2d,0x35,0x01,0x02,0x04,
		1,1,0x2d,0x32,0x39,0x03,0x09,0x13,
		1,1,0x11,0x24,0x3d,0x03,0x0a,0x13,
		1,1,0x22,0x32,0x3c,0x03,0x09,0x13,
		1,1,0x23,0x32,0x39,0x03,0x0a,0x12,
		1,1,0x21,0x24,0x39,0x04,0x0c,0x00,
		1,1,0x11,0x31,0x3c,0x05,0x0c,0x00,
		1,1,0x12,0x2b,0x36,0x03,0x0c,0x11,
		1,1,0x22,0x32,0x3a,0x02,0x0b,0x00,
		1,1,0x11,0x1d,0x3b,0x03,0x16,0x00,
		1,1,0x25,0x31,0x00,0x01,0x15,0x22,
		1,1,0x23,0x29,0x3a,0x02,0x14,0x00,
		1,1,0x25,0x2d,0x35,0x01,0x16,0x00
};

//7-11
tagReplaceCard CardBankerKingCard[]=
{
	1,1,0x25,0x32,0x00,0x03,0x02,0x16,
		1,1,0x23,0x2b,0x39,0x07,0x02,0x06,
		1,1,0x15,0x17,0x35,0x03,0x02,0x05,
		1,1,0x14,0x16,0x37,0x07,0x02,0x05,
		1,1,0x28,0x36,0x00,0x03,0x06,0x00,
		1,1,0x2a,0x34,0x00,0x01,0x06,0x00,
		1,1,0x16,0x27,0x00,0x03,0x06,0x00,
		1,1,0x14,0x1a,0x00,0x03,0x06,0x00,
		1,1,0x37,0x3a,0x00,0x02,0x13,0x29,
		1,1,0x23,0x36,0x00,0x07,0x12,0x00,
		1,1,0x28,0x29,0x00,0x03,0x12,0x00,
		1,1,0x23,0x2c,0x39,0x07,0x13,0x18,
		1,1,0x11,0x24,0x00,0x0a,0x19,0x00,
		1,1,0x34,0x3b,0x00,0x05,0x19,0x00,
		1,1,0x25,0x27,0x00,0x05,0x19,0x00,
		1,1,0x29,0x36,0x00,0x02,0x18,0x00
};

//12-13
tagReplaceCard CardEqualCard[]=
{
	1,1,0x1a,0x26,0x00,0x02,0x05,0x00,
		1,1,0x15,0x1c,0x29,0x18,0x02,0x11,
		1,1,0x15,0x21,0x00,0x27,0x05,0x00,
		1,1,0x1c,0x26,0x00,0x01,0x05,0x00,
		1,1,0x19,0x25,0x39,0x03,0x0c,0x11,
		1,1,0x2a,0x24,0x39,0x03,0x0c,0x11,
		1,1,0x2a,0x34,0x37,0x02,0x09,0x29,
		1,1,0x0c,0x32,0x3a,0x01,0x09,0x0a,
		1,1,0x15,0x27,0x00,0x27,0x11,0x00,
		1,1,0x17,0x1a,0x00,0x06,0x11,0x00,
		1,1,0x22,0x25,0x00,0x0a,0x1c,0x00,
		1,1,0x37,0x3b,0x00,0x06,0x0c,0x00,
		1,1,0x34,0x38,0x3a,0x08,0x1c,0x1d,
		1,1,0x28,0x27,0x33,0x05,0x14,0x22,
		1,1,0x14,0x19,0x1d,0x38,0x11,0x12,
		1,1,0x21,0x2d,0x34,0x0c,0x13,0x21
};

//14
tagReplaceCard CardSamePointCard[]=
{
	1,1,0x21,0x35,0x00,0x0d,0x05,0x00,
		1,1,0x22,0x24,0x00,0x0c,0x04,0x00,
		1,1,0x1d,0x15,0x00,0x01,0x05,0x00,
		1,1,0x11,0x15,0x00,0x0d,0x05,0x00,
		1,1,0x23,0x2b,0x3a,0x0b,0x1b,0x1a,
		1,1,0x16,0x1a,0x00,0x08,0x0a,0x00,
		1,1,0x13,0x28,0x39,0x0b,0x08,0x09,
		1,1,0x26,0x2c,0x00,0x08,0x0c,0x00,
		1,1,0x29,0x38,0x00,0x05,0x18,0x00,
		1,1,0x38,0x39,0x00,0x06,0x09,0x00,
		1,1,0x29,0x31,0x32,0x05,0x21,0x22,
		1,1,0x38,0x39,0x00,0x06,0x19,0x00,
		1,1,0x27,0x2b,0x00,0x17,0x1b,0x00,
		1,1,0x28,0x2c,0x00,0x16,0x1c,0x00,
		1,1,0x2b,0x32,0x35,0x13,0x22,0x25,
		1,1,0x39,0x35,0x00,0x15,0x25,0x00
};

//龙
tagReplaceCard CardPlayerPairCard[]=
{
	1,1,0x05,0x25,0x3a,0x01,0x02,0x03,
		1,1,0x08,0x28,0x00,0x01,0x05,0x00,
		1,1,0x07,0x17,0x21,0x01,0x03,0x00,
		1,1,0x17,0x27,0x2d,0x01,0x06,0x00,
		1,1,0x25,0x35,0x3c,0x03,0x09,0x15,
		1,1,0x2a,0x3a,0x3d,0x03,0x08,0x14,
		1,1,0x1c,0x2c,0x34,0x03,0x07,0x12,
		1,1,0x24,0x31,0x34,0x03,0x11,0x13,
		1,1,0x27,0x33,0x00,0x06,0x0a,0x00,
		1,1,0x1a,0x2a,0x32,0x06,0x09,0x00,
		1,1,0x17,0x27,0x32,0x05,0x0d,0x00,
		1,1,0x25,0x35,0x3b,0x06,0x0a,0x00,
		1,1,0x28,0x38,0x00,0x02,0x13,0x17,
		1,1,0x1c,0x2b,0x3c,0x0b,0x0c,0x13,
		1,1,0x21,0x31,0x3b,0x0a,0x13,0x14,
		1,1,0x1c,0x2c,0x32,0x0a,0x0b,0x0c
};

//和
tagReplaceCard CardPlayerWinCard[]=
{
	1,1,0x09,0x15,0x26,0x19,0x02,0x07,
		1,1,0x0c,0x23,0x2a,0x1c,0x02,0x08,
		1,1,0x0d,0x16,0x00,0x2d,0x02,0x07,
		1,1,0x11,0x26,0x00,0x01,0x02,0x04,
		1,1,0x26,0x27,0x2a,0x06,0x09,0x05,
		1,1,0x32,0x34,0x00,0x02,0x08,0x25,
		1,1,0x19,0x32,0x36,0x09,0x03,0x15,
		1,1,0x17,0x19,0x00,0x07,0x0a,0x13,
		1,1,0x29,0x38,0x00,0x09,0x18,0x2d,
		1,1,0x2b,0x2c,0x36,0x0b,0x1a,0x1d,
		1,1,0x2a,0x37,0x00,0x0a,0x1b,0x23,
		1,1,0x25,0x37,0x00,0x05,0x1c,0x1d,
		1,1,0x24,0x27,0x36,0x04,0x16,0x18,
		1,1,0x2b,0x31,0x36,0x0b,0x16,0x1b,
		1,1,0x23,0x32,0x3d,0x03,0x17,0x00,
		1,1,0x2a,0x37,0x00,0x0a,0x16,0x00
};
//虎
tagReplaceCard CardPlayerKingCard[]=
{
	1,1,0x14,0x25,0x00,0x05,0x02,0x00,
		1,1,0x14,0x35,0x00,0x08,0x02,0x00,
		1,1,0x0a,0x25,0x34,0x0c,0x02,0x03,
		1,1,0x28,0x33,0x38,0x09,0x02,0x00,
		1,1,0x24,0x35,0x00,0x08,0x09,0x00,
		1,1,0x13,0x16,0x00,0x04,0x09,0x00,
		1,1,0x1a,0x21,0x00,0x0d,0x09,0x00,
		1,1,0x2c,0x2d,0x00,0x0d,0x08,0x00,
		1,1,0x15,0x1b,0x00,0x06,0x09,0x00,
		1,1,0x15,0x23,0x00,0x06,0x09,0x00,
		1,1,0x11,0x1a,0x00,0x06,0x09,0x00,
		1,1,0x1a,0x28,0x00,0x0c,0x09,0x00,
		1,1,0x13,0x22,0x37,0x09,0x14,0x16,
		1,1,0x1a,0x21,0x38,0x0b,0x13,0x00,
		1,1,0x34,0x36,0x39,0x0b,0x13,0x28,
		1,1,0x2a,0x2d,0x00,0x0b,0x13,0x00
};
//15-16
tagReplaceCard CardPlayerNine[]=
{
	1,1,0x14,0x25,0x00,0x0b,0x02,0x00,
		1,1,0x16,0x35,0x00,0x0a,0x02,0x00,
		1,1,0x0a,0x25,0x34,0x05,0x02,0x03,
		1,1,0x28,0x33,0x38,0x18,0x02,0x00,
		1,1,0x27,0x35,0x00,0x08,0x09,0x00,
		1,1,0x13,0x16,0x00,0x0d,0x09,0x00,
		1,1,0x18,0x21,0x00,0x07,0x09,0x00,
		1,1,0x2b,0x2d,0x00,0x05,0x08,0x00,
		1,1,0x19,0x1b,0x00,0x06,0x09,0x00,
		1,1,0x17,0x23,0x00,0x09,0x09,0x00,
		1,1,0x19,0x1a,0x00,0x06,0x09,0x00,
		1,1,0x1a,0x28,0x00,0x06,0x09,0x00,
		1,1,0x12,0x22,0x37,0x3d,0x14,0x16,
		1,1,0x1d,0x21,0x38,0x23,0x13,0x00,
		1,1,0x34,0x36,0x39,0x0b,0x13,0x28,
		1,1,0x25,0x2d,0x00,0x1b,0x13,0x00
};
//17-21
tagReplaceCard CardPlayerTen[]=
{
	1,1,0x26,0x35,0x00,0x0b,0x05,0x00,
		1,1,0x25,0x24,0x00,0x0c,0x04,0x00,
		1,1,0x1d,0x15,0x00,0x08,0x05,0x00,
		1,1,0x17,0x15,0x00,0x0d,0x05,0x00,
		1,1,0x26,0x2b,0x3a,0x0b,0x1b,0x1a,
		1,1,0x1b,0x1a,0x00,0x08,0x0a,0x00,
		1,1,0x16,0x28,0x39,0x0b,0x08,0x09,
		1,1,0x26,0x2c,0x00,0x0a,0x0c,0x00,
		1,1,0x29,0x38,0x00,0x0a,0x18,0x00,
		1,1,0x38,0x39,0x00,0x0b,0x09,0x00,
		1,1,0x29,0x31,0x32,0x08,0x21,0x22,
		1,1,0x38,0x39,0x00,0x09,0x19,0x00,
		1,1,0x27,0x2b,0x00,0x1a,0x1b,0x00,
		1,1,0x2d,0x2c,0x00,0x16,0x1c,0x00,
		1,1,0x2b,0x32,0x35,0x17,0x22,0x25,
		1,1,0x37,0x35,0x00,0x1b,0x15,0x00
};
//22-26
tagReplaceCard CardPlayerEleven[]=
{
	1,1,0x1b,0x25,0x37,0x0b,0x11,0x18,
		1,1,0x1c,0x24,0x37,0x0a,0x11,0x14,
		1,1,0x29,0x39,0x3b,0x0d,0x11,0x19,
		1,1,0x1c,0x2b,0x3a,0x0d,0x11,0x18,
		1,1,0x1c,0x25,0x2a,0x0c,0x13,0x00,
		1,1,0x3d,0x36,0x3a,0x0a,0x22,0x00,
		1,1,0x3b,0x3a,0x3d,0x0b,0x12,0x00,
		1,1,0x2c,0x28,0x31,0x0a,0x22,0x00,
		1,1,0x2a,0x29,0x2c,0x0d,0x16,0x1c,
		1,1,0x3d,0x3b,0x3c,0x09,0x16,0x32,
		1,1,0x2b,0x34,0x3a,0x0c,0x16,0x1d,
		1,1,0x3d,0x33,0x39,0x0c,0x17,0x00,
		1,1,0x2c,0x33,0x3c,0x0b,0x1b,0x2b,
		1,1,0x3d,0x36,0x3c,0x0d,0x2a,0x2b,
		1,1,0x2d,0x32,0x3a,0x0a,0x1a,0x23,
		1,1,0x2d,0x34,0x37,0x0b,0x1b,0x24
};

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//龙和2-6
tagReplaceCard LongAndFour[]=
{
		1,1,0x12,0x25,0x37,0x01,0x11,0x18,
		1,1,0x23,0x24,0x37,0x11,0x11,0x14,
		1,1,0x04,0x39,0x3b,0x21,0x11,0x19,
		1,1,0x35,0x2b,0x3a,0x31,0x11,0x18,
		1,1,0x13,0x25,0x2a,0x02,0x13,0x00,
		1,1,0x34,0x36,0x3a,0x12,0x22,0x00,
		1,1,0x05,0x3a,0x3d,0x21,0x12,0x00,
		1,1,0x24,0x28,0x31,0x02,0x22,0x00,
		1,1,0x34,0x29,0x2c,0x11,0x16,0x1c,
		1,1,0x03,0x3b,0x3c,0x01,0x16,0x32,
		1,1,0x23,0x34,0x3a,0x12,0x16,0x1d,
		1,1,0x32,0x33,0x39,0x21,0x17,0x00,
		1,1,0x22,0x25,0x37,0x11,0x11,0x18,
		1,1,0x33,0x24,0x37,0x22,0x11,0x14,
		1,1,0x14,0x39,0x3b,0x22,0x11,0x19,
		1,1,0x25,0x2b,0x3a,0x01,0x11,0x18,
};
//龙和7-11
tagReplaceCard LongAndFive[]=
{
		1,1,0x16,0x25,0x37,0x01,0x11,0x18,
		1,1,0x07,0x24,0x37,0x11,0x11,0x14,
		1,1,0x28,0x39,0x3b,0x21,0x11,0x19,
		1,1,0x39,0x2b,0x3a,0x31,0x11,0x18,
		1,1,0x0a,0x25,0x2a,0x01,0x13,0x00,
		1,1,0x36,0x36,0x3a,0x22,0x22,0x00,
		1,1,0x27,0x3a,0x3d,0x12,0x12,0x00,
		1,1,0x08,0x28,0x31,0x32,0x22,0x00,
		1,1,0x39,0x29,0x2c,0x32,0x16,0x1c,
		1,1,0x36,0x3b,0x3c,0x35,0x16,0x32,
		1,1,0x26,0x34,0x3a,0x03,0x16,0x1d,
		1,1,0x37,0x33,0x39,0x03,0x17,0x00,
		1,1,0x28,0x33,0x3c,0x13,0x1b,0x2b,
		1,1,0x16,0x36,0x3c,0x24,0x2a,0x2b,
		1,1,0x07,0x32,0x3a,0x34,0x1a,0x23,
		1,1,0x26,0x34,0x37,0x05,0x1b,0x24
};
//龙和12-13
tagReplaceCard LongAndSix[]=
{
		1,1,0x17,0x25,0x37,0x05,0x11,0x18,
		1,1,0x28,0x24,0x37,0x04,0x11,0x14,
		1,1,0x39,0x39,0x3b,0x13,0x11,0x19,
		1,1,0x0a,0x2b,0x3a,0x22,0x11,0x18,
		1,1,0x1b,0x25,0x2a,0x31,0x13,0x00,
		1,1,0x37,0x36,0x3a,0x06,0x22,0x00,
		1,1,0x18,0x3a,0x3d,0x25,0x12,0x00,
		1,1,0x29,0x28,0x31,0x14,0x22,0x00,
		1,1,0x2a,0x29,0x2c,0x13,0x16,0x1c,
		1,1,0x3b,0x3b,0x3c,0x02,0x16,0x32,
		1,1,0x2b,0x34,0x3a,0x22,0x16,0x1d,
		1,1,0x39,0x33,0x39,0x03,0x17,0x00,
		1,1,0x29,0x33,0x3c,0x04,0x1b,0x2b,
		1,1,0x37,0x36,0x3c,0x36,0x2a,0x2b,
		1,1,0x1a,0x32,0x3a,0x12,0x1a,0x23,
		1,1,0x2a,0x34,0x37,0x23,0x1b,0x24
};
//龙和14
tagReplaceCard LongAndSeven[]=
{
		1,1,0x18,0x25,0x37,0x06,0x11,0x18,
		1,1,0x19,0x24,0x37,0x25,0x11,0x14,
		1,1,0x2a,0x39,0x3b,0x14,0x11,0x19,
		1,1,0x1b,0x2b,0x3a,0x33,0x11,0x18,
		1,1,0x1c,0x25,0x2a,0x02,0x13,0x00,
		1,1,0x3d,0x36,0x3a,0x11,0x22,0x00,
		1,1,0x38,0x3a,0x3d,0x26,0x12,0x00,
		1,1,0x29,0x28,0x31,0x05,0x22,0x00,
		1,1,0x0a,0x29,0x2c,0x04,0x16,0x1c,
		1,1,0x3b,0x3b,0x3c,0x13,0x16,0x32,
		1,1,0x2c,0x34,0x3a,0x22,0x16,0x1d,
		1,1,0x3d,0x33,0x39,0x21,0x17,0x00,
		1,1,0x28,0x33,0x3c,0x36,0x1b,0x2b,
		1,1,0x39,0x36,0x3c,0x15,0x2a,0x2b,
		1,1,0x2a,0x32,0x3a,0x24,0x1a,0x23,
		1,1,0x2b,0x34,0x37,0x23,0x1b,0x24
};
//龙和15-16
tagReplaceCard LongAndNight[]=
{
		1,1,0x18,0x25,0x37,0x07,0x11,0x18,
		1,1,0x29,0x24,0x37,0x17,0x11,0x14,
		1,1,0x19,0x39,0x3b,0x06,0x11,0x19,
		1,1,0x1a,0x2b,0x3a,0x26,0x11,0x18,
		1,1,0x2a,0x25,0x2a,0x15,0x13,0x00,
		1,1,0x3b,0x36,0x3a,0x35,0x22,0x00,
		1,1,0x2b,0x3a,0x3d,0x04,0x12,0x00,
		1,1,0x2c,0x28,0x31,0x34,0x22,0x00,
		1,1,0x1c,0x29,0x2c,0x33,0x16,0x1c,
		1,1,0x0d,0x3b,0x3c,0x03,0x16,0x32,
		1,1,0x2d,0x34,0x3a,0x12,0x16,0x1d,
		1,1,0x38,0x33,0x39,0x27,0x17,0x00,
		1,1,0x29,0x33,0x3c,0x36,0x1b,0x2b,
		1,1,0x3a,0x36,0x3c,0x05,0x2a,0x2b,
		1,1,0x2b,0x32,0x3a,0x04,0x1a,0x23,
		1,1,0x2c,0x34,0x37,0x14,0x1b,0x24
};
//龙和17-21
tagReplaceCard LongAndNine[]=
{
		1,1,0x19,0x25,0x37,0x08,0x11,0x18,
		1,1,0x1b,0x24,0x37,0x18,0x11,0x14,
		1,1,0x2d,0x39,0x3b,0x28,0x14,0x19,
		1,1,0x1a,0x2b,0x3a,0x09,0x11,0x18,
		1,1,0x1c,0x25,0x2a,0x19,0x13,0x00,
		1,1,0x3b,0x36,0x3a,0x0a,0x22,0x00,
		1,1,0x3a,0x3a,0x3d,0x27,0x12,0x00,
		1,1,0x2b,0x28,0x31,0x17,0x22,0x00,
		1,1,0x2c,0x29,0x2c,0x37,0x16,0x1c,
		1,1,0x3d,0x3b,0x3c,0x05,0x16,0x32,
		1,1,0x2a,0x34,0x3a,0x38,0x16,0x1d,
		1,1,0x3c,0x33,0x39,0x18,0x17,0x00,
		1,1,0x2b,0x33,0x3c,0x29,0x1b,0x2b,
		1,1,0x3b,0x36,0x3c,0x06,0x2a,0x2b,
		1,1,0x2c,0x32,0x3a,0x16,0x1a,0x23,
		1,1,0x2d,0x34,0x37,0x26,0x1b,0x24
};
//龙和22-26
tagReplaceCard LongAndTen[]=
{
		1,1,0x1c,0x25,0x37,0x0a,0x11,0x18,
		1,1,0x2c,0x24,0x37,0x1b,0x11,0x14,
		1,1,0x2d,0x39,0x3b,0x09,0x11,0x19,
		1,1,0x1d,0x2b,0x3a,0x2a,0x11,0x18,
		1,1,0x3d,0x25,0x2a,0x3b,0x13,0x00,
		1,1,0x0d,0x36,0x3a,0x2c,0x22,0x00,
		1,1,0x2c,0x25,0x37,0x1a,0x11,0x18,
		1,1,0x3c,0x24,0x37,0x2b,0x11,0x14,
		1,1,0x0d,0x39,0x3b,0x39,0x11,0x19,
		1,1,0x2d,0x2b,0x3a,0x0a,0x11,0x18,
		1,1,0x1d,0x25,0x2a,0x1b,0x13,0x00,
		1,1,0x3d,0x36,0x3a,0x3c,0x22,0x00		
};

//////////////////////////////////////////////////////////////////////////
//平和2-6
tagReplaceCard HeAndFour[]=
{
		1,1,0x01,0x25,0x37,0x11,0x11,0x18,
		1,1,0x02,0x24,0x37,0x22,0x11,0x14,
		1,1,0x03,0x39,0x3b,0x33,0x11,0x19,
		1,1,0x11,0x25,0x37,0x21,0x11,0x18,
		1,1,0x12,0x24,0x37,0x32,0x11,0x14,
		1,1,0x13,0x39,0x3b,0x03,0x11,0x19,
		1,1,0x21,0x25,0x37,0x31,0x11,0x18,
		1,1,0x22,0x24,0x37,0x32,0x11,0x14,
		1,1,0x23,0x39,0x3b,0x03,0x11,0x19,
		1,1,0x31,0x25,0x37,0x01,0x11,0x18,
		1,1,0x32,0x24,0x37,0x12,0x11,0x14,
		1,1,0x33,0x39,0x3b,0x03,0x11,0x19
};
//平和7-11
tagReplaceCard HeAndFive[]=
{
		1,1,0x04,0x25,0x37,0x14,0x11,0x18,
		1,1,0x05,0x24,0x37,0x25,0x11,0x14,
		1,1,0x14,0x25,0x37,0x24,0x11,0x18,
		1,1,0x15,0x24,0x37,0x35,0x11,0x14,
		1,1,0x24,0x25,0x37,0x04,0x11,0x18,
		1,1,0x25,0x24,0x37,0x15,0x11,0x14,
		1,1,0x34,0x25,0x37,0x34,0x11,0x18,
		1,1,0x35,0x24,0x37,0x05,0x11,0x14
};
//平和12-13
tagReplaceCard HeAndSix[]=
{
		1,1,0x06,0x25,0x37,0x16,0x11,0x18,
		1,1,0x16,0x25,0x37,0x26,0x11,0x18,
		1,1,0x26,0x25,0x37,0x36,0x11,0x18,
		1,1,0x36,0x25,0x37,0x06,0x11,0x18
};
//平和14
tagReplaceCard HeAndSeven[]=
{
		1,1,0x07,0x25,0x37,0x17,0x11,0x18,
		1,1,0x17,0x25,0x37,0x27,0x11,0x18,
		1,1,0x27,0x25,0x37,0x37,0x11,0x18,
		1,1,0x37,0x25,0x37,0x07,0x11,0x18
};
//平和15-16
tagReplaceCard HeAndNight[]=
{
		1,1,0x08,0x25,0x37,0x18,0x11,0x18,
		1,1,0x18,0x25,0x37,0x28,0x11,0x18,
		1,1,0x28,0x25,0x37,0x38,0x11,0x18,
		1,1,0x38,0x25,0x37,0x08,0x11,0x18
};
//平和17-21
tagReplaceCard HeAndNine[]=
{
		1,1,0x09,0x25,0x37,0x19,0x11,0x18,
		1,1,0x0a,0x24,0x37,0x2a,0x11,0x14,
		1,1,0x19,0x25,0x37,0x29,0x11,0x18,
		1,1,0x1a,0x24,0x37,0x3a,0x11,0x14,
		1,1,0x29,0x25,0x37,0x09,0x11,0x18,
		1,1,0x2a,0x24,0x37,0x1a,0x11,0x14,
		1,1,0x39,0x25,0x37,0x39,0x11,0x18,
		1,1,0x3a,0x24,0x37,0x0a,0x11,0x14
};
//平和22-26
tagReplaceCard HeAndTen[]=
{
		1,1,0x0b,0x25,0x37,0x1b,0x11,0x18,
		1,1,0x0c,0x24,0x37,0x2c,0x11,0x14,
		1,1,0x0d,0x39,0x3b,0x3d,0x11,0x19,
		1,1,0x1b,0x25,0x37,0x2b,0x11,0x18,
		1,1,0x1c,0x24,0x37,0x3c,0x11,0x14,
		1,1,0x1d,0x39,0x3b,0x0d,0x11,0x19,
		1,1,0x2b,0x25,0x37,0x3b,0x11,0x18,
		1,1,0x2c,0x24,0x37,0x3c,0x11,0x14,
		1,1,0x2d,0x39,0x3b,0x0d,0x11,0x19,
		1,1,0x3b,0x25,0x37,0x0b,0x11,0x18,
		1,1,0x3c,0x24,0x37,0x1c,0x11,0x14,
		1,1,0x3d,0x39,0x3b,0x0d,0x11,0x19
};

//////////////////////////////////////////////////////////////////////////
//虎和2-6
tagReplaceCard HuAndFour[]=
{
		1,1,0x11,0x25,0x37,0x02,0x11,0x18,
		1,1,0x21,0x24,0x37,0x13,0x11,0x14,
		1,1,0x01,0x39,0x3b,0x24,0x11,0x19,
		1,1,0x31,0x2b,0x3a,0x35,0x11,0x18,
		1,1,0x12,0x25,0x2a,0x03,0x13,0x00,
		1,1,0x32,0x36,0x3a,0x14,0x22,0x00,
		1,1,0x01,0x3a,0x3d,0x25,0x12,0x00,
		1,1,0x22,0x28,0x31,0x04,0x22,0x00,
		1,1,0x31,0x29,0x2c,0x14,0x16,0x1c,
		1,1,0x01,0x3b,0x3c,0x03,0x16,0x32,
		1,1,0x22,0x34,0x3a,0x13,0x16,0x1d,
		1,1,0x31,0x33,0x39,0x22,0x17,0x00,
		1,1,0x21,0x25,0x37,0x12,0x11,0x18,
		1,1,0x32,0x24,0x37,0x23,0x11,0x14,
		1,1,0x12,0x39,0x3b,0x24,0x11,0x19,
		1,1,0x21,0x2b,0x3a,0x05,0x11,0x18,
};
//虎和7-11
tagReplaceCard HuAndFive[]=
{
		1,1,0x11,0x25,0x37,0x06,0x11,0x18,
		1,1,0x01,0x24,0x37,0x17,0x11,0x14,
		1,1,0x21,0x39,0x3b,0x28,0x11,0x19,
		1,1,0x31,0x2b,0x3a,0x39,0x11,0x18,
		1,1,0x01,0x25,0x2a,0x0a,0x13,0x00,
		1,1,0x32,0x36,0x3a,0x26,0x22,0x00,
		1,1,0x22,0x3a,0x3d,0x17,0x12,0x00,
		1,1,0x02,0x28,0x31,0x38,0x22,0x00,
		1,1,0x32,0x29,0x2c,0x39,0x16,0x1c,
		1,1,0x35,0x3b,0x3c,0x36,0x16,0x32,
		1,1,0x23,0x34,0x3a,0x06,0x16,0x1d,
		1,1,0x33,0x33,0x39,0x07,0x17,0x00,
		1,1,0x23,0x33,0x3c,0x18,0x1b,0x2b,
		1,1,0x14,0x36,0x3c,0x26,0x2a,0x2b,
		1,1,0x04,0x32,0x3a,0x37,0x1a,0x23,
		1,1,0x25,0x34,0x37,0x06,0x1b,0x24
};
//虎和12-13
tagReplaceCard HuAndSix[]=
{
		1,1,0x15,0x25,0x37,0x07,0x11,0x18,
		1,1,0x24,0x24,0x37,0x08,0x11,0x14,
		1,1,0x33,0x39,0x3b,0x19,0x11,0x19,
		1,1,0x02,0x2b,0x3a,0x2a,0x11,0x18,
		1,1,0x11,0x25,0x2a,0x3b,0x13,0x00,
		1,1,0x36,0x36,0x3a,0x07,0x22,0x00,
		1,1,0x15,0x3a,0x3d,0x28,0x12,0x00,
		1,1,0x24,0x28,0x31,0x19,0x22,0x00,
		1,1,0x23,0x29,0x2c,0x1a,0x16,0x1c,
		1,1,0x32,0x3b,0x3c,0x0b,0x16,0x32,
		1,1,0x22,0x34,0x3a,0x2b,0x16,0x1d,
		1,1,0x33,0x33,0x39,0x09,0x17,0x00,
		1,1,0x24,0x33,0x3c,0x09,0x1b,0x2b,
		1,1,0x36,0x36,0x3c,0x37,0x2a,0x2b,
		1,1,0x12,0x32,0x3a,0x1a,0x1a,0x23,
		1,1,0x23,0x34,0x37,0x2a,0x1b,0x24
};
//虎和14
tagReplaceCard HuAndSeven[]=
{
		1,1,0x16,0x25,0x37,0x08,0x11,0x18,
		1,1,0x15,0x24,0x37,0x29,0x11,0x14,
		1,1,0x24,0x39,0x3b,0x1a,0x11,0x19,
		1,1,0x13,0x2b,0x3a,0x3b,0x11,0x18,
		1,1,0x12,0x25,0x2a,0x0c,0x13,0x00,
		1,1,0x31,0x36,0x3a,0x1d,0x22,0x00,
		1,1,0x36,0x3a,0x3d,0x28,0x12,0x00,
		1,1,0x25,0x28,0x31,0x09,0x22,0x00,
		1,1,0x04,0x29,0x2c,0x0a,0x16,0x1c,
		1,1,0x33,0x3b,0x3c,0x1b,0x16,0x32,
		1,1,0x22,0x34,0x3a,0x2c,0x16,0x1d,
		1,1,0x31,0x33,0x39,0x2d,0x17,0x00,
		1,1,0x26,0x33,0x3c,0x38,0x1b,0x2b,
		1,1,0x35,0x36,0x3c,0x19,0x2a,0x2b,
		1,1,0x24,0x32,0x3a,0x2a,0x1a,0x23,
		1,1,0x23,0x34,0x37,0x2b,0x1b,0x24
};
//虎和15-16
tagReplaceCard HuAndNight[]=
{
		1,1,0x17,0x25,0x37,0x08,0x11,0x18,
		1,1,0x27,0x24,0x37,0x19,0x11,0x14,
		1,1,0x16,0x39,0x3b,0x09,0x11,0x19,
		1,1,0x16,0x2b,0x3a,0x2a,0x11,0x18,
		1,1,0x25,0x25,0x2a,0x1a,0x13,0x00,
		1,1,0x35,0x36,0x3a,0x3b,0x22,0x00,
		1,1,0x24,0x3a,0x3d,0x0b,0x12,0x00,
		1,1,0x24,0x28,0x31,0x3c,0x22,0x00,
		1,1,0x13,0x29,0x2c,0x3c,0x16,0x1c,
		1,1,0x03,0x3b,0x3c,0x0d,0x16,0x32,
		1,1,0x22,0x34,0x3a,0x1d,0x16,0x1d,
		1,1,0x37,0x33,0x39,0x28,0x17,0x00,
		1,1,0x26,0x33,0x3c,0x39,0x1b,0x2b,
		1,1,0x35,0x36,0x3c,0x0a,0x2a,0x2b,
		1,1,0x24,0x32,0x3a,0x0b,0x1a,0x23,
		1,1,0x24,0x34,0x37,0x1c,0x1b,0x24
};
//虎和17-21
tagReplaceCard HuAndNine[]=
{
		1,1,0x18,0x25,0x37,0x09,0x11,0x18,
		1,1,0x18,0x24,0x37,0x1b,0x11,0x14,
		1,1,0x28,0x39,0x3b,0x2d,0x14,0x19,
		1,1,0x19,0x2b,0x3a,0x0a,0x11,0x18,
		1,1,0x19,0x25,0x2a,0x1c,0x13,0x00,
		1,1,0x3a,0x36,0x3a,0x0b,0x22,0x00,
		1,1,0x37,0x3a,0x3d,0x2a,0x12,0x00,
		1,1,0x27,0x28,0x31,0x1b,0x22,0x00,
		1,1,0x27,0x29,0x2c,0x3c,0x16,0x1c,
		1,1,0x35,0x3b,0x3c,0x0d,0x16,0x32,
		1,1,0x28,0x34,0x3a,0x3a,0x16,0x1d,
		1,1,0x38,0x33,0x39,0x1c,0x17,0x00,
		1,1,0x29,0x33,0x3c,0x2b,0x1b,0x2b,
		1,1,0x36,0x36,0x3c,0x0b,0x2a,0x2b,
		1,1,0x26,0x32,0x3a,0x1c,0x1a,0x23,
		1,1,0x27,0x34,0x37,0x2d,0x1b,0x24
};
//虎和22-26
tagReplaceCard HuAndTen[]=
{
		1,1,0x1a,0x25,0x37,0x0c,0x11,0x18,
		1,1,0x2b,0x24,0x37,0x1c,0x11,0x14,
		1,1,0x29,0x39,0x3b,0x0d,0x11,0x19,
		1,1,0x1a,0x2b,0x3a,0x2d,0x11,0x18,
		1,1,0x3b,0x25,0x2a,0x3d,0x13,0x00,
		1,1,0x0c,0x36,0x3a,0x2d,0x22,0x00,
		1,1,0x2a,0x25,0x37,0x1c,0x11,0x18,
		1,1,0x3b,0x24,0x37,0x2c,0x11,0x14,
		1,1,0x09,0x39,0x3b,0x3d,0x11,0x19,
		1,1,0x2a,0x2b,0x3a,0x0d,0x11,0x18,
		1,1,0x1b,0x25,0x2a,0x1d,0x13,0x00,
		1,1,0x3c,0x36,0x3a,0x3d,0x22,0x00		
};
//
CServerControlItemSink::CServerControlItemSink(void)
{
	//控制变量
	ZeroMemory(m_cbWinSideControl,sizeof(m_cbWinSideControl));	
	m_nSendCardCount=0;
	m_cbExcuteTimes = 0;
}

CServerControlItemSink::~CServerControlItemSink( void )
{

}

//服务器控制
bool __cdecl CServerControlItemSink::ServerControl(WORD wSubCmdID, const void * pDataBuffer, WORD wDataSize, IServerUserItem * pIServerUserItem, ITableFrame * pITableFrame)
{
	//如果不具有管理员权限 则返回错误
	if (!CUserRight::IsGameCheatUser(pIServerUserItem->GetUserRight()))
	{
		return false;
	}
	
	const CMD_C_AdminReq* AdminReq=static_cast<const CMD_C_AdminReq*>(pDataBuffer);
	switch(AdminReq->cbReqType)
	{
	case RQ_RESET_CONTROL:
		{
			ZeroMemory(m_cbWinSideControl,sizeof(m_cbWinSideControl));
			m_cbExcuteTimes=0;
			CMD_S_CommandResult cResult;
			cResult.cbAckType=ACK_RESET_CONTROL;
			cResult.cbResult=CR_ACCEPT;
			pITableFrame->SendUserItemData(pIServerUserItem,SUB_S_AMDIN_COMMAND,&cResult,sizeof(CMD_S_CommandResult));
			break;
		}
	case RQ_SET_WIN_AREA:
		{
			if(AdminReq->cbExtendData[0]>0)
			{
				m_cbWinSideControl[0]=AdminReq->cbExtendData[0];
				m_cbWinSideControl[1]=AdminReq->cbExtendData[1];
				m_cbExcuteTimes=AdminReq->cbExtendData[2];
				CMD_S_CommandResult cResult;
				cResult.cbAckType=ACK_SET_WIN_AREA;
				cResult.cbResult=CR_ACCEPT;
				pITableFrame->SendUserItemData(pIServerUserItem,SUB_S_AMDIN_COMMAND,&cResult,sizeof(CMD_S_CommandResult));
			}
			else
			{
				CMD_S_CommandResult cResult;
				cResult.cbAckType=ACK_SET_WIN_AREA;
				cResult.cbResult=CR_REFUSAL;
				pITableFrame->SendUserItemData(pIServerUserItem,SUB_S_AMDIN_COMMAND,&cResult,sizeof(CMD_S_CommandResult));

			}
			break;
		}
	case RQ_PRINT_SYN:
		{
			CMD_S_CommandResult cResult;
			cResult.cbAckType=ACK_PRINT_SYN;
			cResult.cbResult=CR_ACCEPT;
			cResult.cbExtendData[0]=m_cbWinSideControl[0];
			cResult.cbExtendData[1]=m_cbWinSideControl[1];
			cResult.cbExtendData[2]=m_cbExcuteTimes;
			pITableFrame->SendUserItemData(pIServerUserItem,SUB_S_AMDIN_COMMAND,&cResult,sizeof(CMD_S_CommandResult));
			break;
		}

	}

	return true;
}

//需要控制
bool __cdecl CServerControlItemSink::NeedControl()
{
	if (m_cbWinSideControl[0] > 0 && m_cbExcuteTimes > 0)
	{
		return true;
	}
	return false;
	
}

//满足控制
bool __cdecl CServerControlItemSink::MeetControl(tagControlInfo ControlInfo)
{
	return true;
}

//完成控制
bool __cdecl CServerControlItemSink::CompleteControl()
{
	if (m_cbExcuteTimes > 0)
		m_cbExcuteTimes--;	

	if ( m_cbExcuteTimes == 0)
	{
		m_cbExcuteTimes = 0;								
		ZeroMemory(m_cbWinSideControl,sizeof(m_cbWinSideControl));
		m_nSendCardCount=0;		
	}

	return true;
}

//返回控制区域
bool __cdecl CServerControlItemSink::ControlResult(BYTE	cbTableCardArray[], BYTE cbCardCount[])
{
	if (m_cbWinSideControl[0]>0&&m_cbWinSideControl[1]==0)
	{
		switch(m_cbWinSideControl[0])
		{
		case 1:
			{
				//龙
				BYTE cbIndex=rand()%CountArray(CardPlayerPairCard);
				CopyMemory(cbCardCount,CardPlayerPairCard[cbIndex].cbCardCount,sizeof(BYTE)*2);
				CopyMemory(cbTableCardArray,CardPlayerPairCard[cbIndex].cbTableCardArray,sizeof(CardPlayerPairCard[cbIndex].cbTableCardArray));
				break;
			}
		case 2:
			{
				//和
				BYTE cbIndex=rand()%CountArray(CardPlayerWinCard);
				CopyMemory(cbCardCount,CardPlayerWinCard[cbIndex].cbCardCount,sizeof(BYTE)*2);
				CopyMemory(cbTableCardArray,CardPlayerWinCard[cbIndex].cbTableCardArray,sizeof(CardPlayerWinCard[cbIndex].cbTableCardArray));
				break;
			}
		case 3:
			{
				//虎
				BYTE cbIndex=rand()%CountArray(CardPlayerKingCard);
				CopyMemory(cbCardCount,CardPlayerKingCard[cbIndex].cbCardCount,sizeof(BYTE)*2);
				CopyMemory(cbTableCardArray,CardPlayerKingCard[cbIndex].cbTableCardArray,sizeof(CardPlayerKingCard[cbIndex].cbTableCardArray));
				break;
			}
		case 4:
			{
				//2-6
				BYTE cbIndex=rand()%CountArray(CardBankerWinCard);
				CopyMemory(cbCardCount,CardBankerWinCard[cbIndex].cbCardCount,sizeof(BYTE)*2);
				CopyMemory(cbTableCardArray,CardBankerWinCard[cbIndex].cbTableCardArray,sizeof(CardBankerWinCard[cbIndex].cbTableCardArray));
				break;
			}
		case 5:
			{
				//7-11
				BYTE cbIndex=rand()%CountArray(CardBankerKingCard);
				CopyMemory(cbCardCount,CardBankerKingCard[cbIndex].cbCardCount,sizeof(BYTE)*2);
				CopyMemory(cbTableCardArray,CardBankerKingCard[cbIndex].cbTableCardArray,sizeof(CardBankerKingCard[cbIndex].cbTableCardArray));
				break;
			}
		case 6:
			{
				//12-13
				BYTE cbIndex=rand()%CountArray(CardEqualCard);
				CopyMemory(cbCardCount,CardEqualCard[cbIndex].cbCardCount,sizeof(BYTE)*2);
				CopyMemory(cbTableCardArray,CardEqualCard[cbIndex].cbTableCardArray,sizeof(CardEqualCard[cbIndex].cbTableCardArray));
				break;
			}
		case 7:
			{
				//14
				BYTE cbIndex=rand()%CountArray(CardSamePointCard);
				CopyMemory(cbCardCount,CardSamePointCard[cbIndex].cbCardCount,sizeof(BYTE)*2);
				CopyMemory(cbTableCardArray,CardSamePointCard[cbIndex].cbTableCardArray,sizeof(CardSamePointCard[cbIndex].cbTableCardArray));
				break;
			}
		case 8:
			{
				//15-16
				BYTE cbIndex=rand()%CountArray(CardPlayerNine);
				CopyMemory(cbCardCount,CardPlayerNine[cbIndex].cbCardCount,sizeof(BYTE)*2);
				CopyMemory(cbTableCardArray,CardPlayerNine[cbIndex].cbTableCardArray,sizeof(CardPlayerNine[cbIndex].cbTableCardArray));
				break;
			}
		case 9:
			{
				//17-21
				BYTE cbIndex=rand()%CountArray(CardPlayerTen);
				CopyMemory(cbCardCount,CardPlayerTen[cbIndex].cbCardCount,sizeof(BYTE)*2);
				CopyMemory(cbTableCardArray,CardPlayerTen[cbIndex].cbTableCardArray,sizeof(CardPlayerTen[cbIndex].cbTableCardArray));
				break;
			}
		case 10:
			{
				//22-26
				BYTE cbIndex=rand()%CountArray(CardPlayerEleven);
				CopyMemory(cbCardCount,CardPlayerEleven[cbIndex].cbCardCount,sizeof(BYTE)*2);
				CopyMemory(cbTableCardArray,CardPlayerEleven[cbIndex].cbTableCardArray,sizeof(CardPlayerEleven[cbIndex].cbTableCardArray));
				break;
			}		
		default:ASSERT(FALSE); return false;
		}
	}
	else if (m_cbWinSideControl[0]>0&&m_cbWinSideControl[1]>0)
	{
		if (m_cbWinSideControl[0]==1)
		{
			switch(m_cbWinSideControl[1])//龙跟其他区域的组合
			{
			case 4:
				{
					//2-6
					BYTE cbIndex=rand()%CountArray(LongAndFour);
					CopyMemory(cbCardCount,LongAndFour[cbIndex].cbCardCount,sizeof(BYTE)*2);
					CopyMemory(cbTableCardArray,LongAndFour[cbIndex].cbTableCardArray,sizeof(LongAndFour[cbIndex].cbTableCardArray));
					break;
				}
			case 5:
				{
					//7-11
					BYTE cbIndex=rand()%CountArray(LongAndFive);
					CopyMemory(cbCardCount,LongAndFive[cbIndex].cbCardCount,sizeof(BYTE)*2);
					CopyMemory(cbTableCardArray,LongAndFive[cbIndex].cbTableCardArray,sizeof(LongAndFive[cbIndex].cbTableCardArray));
					break;
				}
			case 6:
				{
					//12-13
					BYTE cbIndex=rand()%CountArray(LongAndSix);
					CopyMemory(cbCardCount,LongAndSix[cbIndex].cbCardCount,sizeof(BYTE)*2);
					CopyMemory(cbTableCardArray,LongAndSix[cbIndex].cbTableCardArray,sizeof(LongAndSix[cbIndex].cbTableCardArray));
					break;
				}
			case 7:
				{
					//14
					BYTE cbIndex=rand()%CountArray(LongAndSeven);
					CopyMemory(cbCardCount,LongAndSeven[cbIndex].cbCardCount,sizeof(BYTE)*2);
					CopyMemory(cbTableCardArray,LongAndSeven[cbIndex].cbTableCardArray,sizeof(LongAndSeven[cbIndex].cbTableCardArray));
					break;
				}
			case 8:
				{
					//15-16
					BYTE cbIndex=rand()%CountArray(LongAndNight);
					CopyMemory(cbCardCount,LongAndNight[cbIndex].cbCardCount,sizeof(BYTE)*2);
					CopyMemory(cbTableCardArray,LongAndNight[cbIndex].cbTableCardArray,sizeof(LongAndNight[cbIndex].cbTableCardArray));
					break;
				}
			case 9:
				{
					//17-21
					BYTE cbIndex=rand()%CountArray(LongAndNine);
					CopyMemory(cbCardCount,LongAndNine[cbIndex].cbCardCount,sizeof(BYTE)*2);
					CopyMemory(cbTableCardArray,LongAndNine[cbIndex].cbTableCardArray,sizeof(LongAndNine[cbIndex].cbTableCardArray));
					break;
				}
			case 10:
				{
					//22-26
					BYTE cbIndex=rand()%CountArray(LongAndTen);
					CopyMemory(cbCardCount,LongAndTen[cbIndex].cbCardCount,sizeof(BYTE)*2);
					CopyMemory(cbTableCardArray,LongAndTen[cbIndex].cbTableCardArray,sizeof(LongAndTen[cbIndex].cbTableCardArray));
					break;
				}
			default:ASSERT(FALSE); return false;
			}
		}
		else if (m_cbWinSideControl[0]==2)
		{
			switch(m_cbWinSideControl[1])//和跟其他区域的组合
			{
			case 4:
				{
					//2-6
					BYTE cbIndex=rand()%CountArray(HeAndFour);
					CopyMemory(cbCardCount,HeAndFour[cbIndex].cbCardCount,sizeof(BYTE)*2);
					CopyMemory(cbTableCardArray,HeAndFour[cbIndex].cbTableCardArray,sizeof(HeAndFour[cbIndex].cbTableCardArray));
					break;
				}
			case 5:
				{
					//7-11
					BYTE cbIndex=rand()%CountArray(HeAndFive);
					CopyMemory(cbCardCount,HeAndFive[cbIndex].cbCardCount,sizeof(BYTE)*2);
					CopyMemory(cbTableCardArray,HeAndFive[cbIndex].cbTableCardArray,sizeof(HeAndFive[cbIndex].cbTableCardArray));
					break;
				}
			case 6:
				{
					//12-13
					BYTE cbIndex=rand()%CountArray(HeAndSix);
					CopyMemory(cbCardCount,HeAndSix[cbIndex].cbCardCount,sizeof(BYTE)*2);
					CopyMemory(cbTableCardArray,HeAndSix[cbIndex].cbTableCardArray,sizeof(HeAndSix[cbIndex].cbTableCardArray));
					break;
				}
			case 7:
				{
					//14
					BYTE cbIndex=rand()%CountArray(HeAndSeven);
					CopyMemory(cbCardCount,HeAndSeven[cbIndex].cbCardCount,sizeof(BYTE)*2);
					CopyMemory(cbTableCardArray,HeAndSeven[cbIndex].cbTableCardArray,sizeof(HeAndSeven[cbIndex].cbTableCardArray));
					break;
				}
			case 8:
				{
					//15-16
					BYTE cbIndex=rand()%CountArray(HeAndNight);
					CopyMemory(cbCardCount,HeAndNight[cbIndex].cbCardCount,sizeof(BYTE)*2);
					CopyMemory(cbTableCardArray,HeAndNight[cbIndex].cbTableCardArray,sizeof(HeAndNight[cbIndex].cbTableCardArray));
					break;
				}
			case 9:
				{
					//17-21
					BYTE cbIndex=rand()%CountArray(HeAndNine);
					CopyMemory(cbCardCount,HeAndNine[cbIndex].cbCardCount,sizeof(BYTE)*2);
					CopyMemory(cbTableCardArray,HeAndNine[cbIndex].cbTableCardArray,sizeof(HeAndNine[cbIndex].cbTableCardArray));
					break;
				}
			case 10:
				{
					//22-26
					BYTE cbIndex=rand()%CountArray(HeAndTen);
					CopyMemory(cbCardCount,HeAndTen[cbIndex].cbCardCount,sizeof(BYTE)*2);
					CopyMemory(cbTableCardArray,HeAndTen[cbIndex].cbTableCardArray,sizeof(HeAndTen[cbIndex].cbTableCardArray));
					break;
				}
			default:ASSERT(FALSE); return false;
			}
		}
		else if (m_cbWinSideControl[0]==3)
		{
			switch(m_cbWinSideControl[1])//虎跟其他区域的组合
			{
			case 4:
				{
					//2-6
					BYTE cbIndex=rand()%CountArray(HuAndFour);
					CopyMemory(cbCardCount,HuAndFour[cbIndex].cbCardCount,sizeof(BYTE)*2);
					CopyMemory(cbTableCardArray,HuAndFour[cbIndex].cbTableCardArray,sizeof(HuAndFour[cbIndex].cbTableCardArray));
					break;
				}
			case 5:
				{
					//7-11
					BYTE cbIndex=rand()%CountArray(HuAndFive);
					CopyMemory(cbCardCount,HuAndFive[cbIndex].cbCardCount,sizeof(BYTE)*2);
					CopyMemory(cbTableCardArray,HuAndFive[cbIndex].cbTableCardArray,sizeof(HuAndFive[cbIndex].cbTableCardArray));
					break;
				}
			case 6:
				{
					//12-13
					BYTE cbIndex=rand()%CountArray(HuAndSix);
					CopyMemory(cbCardCount,HuAndSix[cbIndex].cbCardCount,sizeof(BYTE)*2);
					CopyMemory(cbTableCardArray,HuAndSix[cbIndex].cbTableCardArray,sizeof(HuAndSix[cbIndex].cbTableCardArray));
					break;
				}
			case 7:
				{
					//14
					BYTE cbIndex=rand()%CountArray(HuAndSeven);
					CopyMemory(cbCardCount,HuAndSeven[cbIndex].cbCardCount,sizeof(BYTE)*2);
					CopyMemory(cbTableCardArray,HuAndSeven[cbIndex].cbTableCardArray,sizeof(HuAndSeven[cbIndex].cbTableCardArray));
					break;
				}
			case 8:
				{
					//15-16
					BYTE cbIndex=rand()%CountArray(HuAndNight);
					CopyMemory(cbCardCount,HuAndNight[cbIndex].cbCardCount,sizeof(BYTE)*2);
					CopyMemory(cbTableCardArray,HuAndNight[cbIndex].cbTableCardArray,sizeof(HuAndNight[cbIndex].cbTableCardArray));
					break;
				}
			case 9:
				{
					//17-21
					BYTE cbIndex=rand()%CountArray(HuAndNine);
					CopyMemory(cbCardCount,HuAndNine[cbIndex].cbCardCount,sizeof(BYTE)*2);
					CopyMemory(cbTableCardArray,HuAndNine[cbIndex].cbTableCardArray,sizeof(HuAndNine[cbIndex].cbTableCardArray));
					break;
				}
			case 10:
				{
					//22-26
					BYTE cbIndex=rand()%CountArray(HuAndTen);
					CopyMemory(cbCardCount,HuAndTen[cbIndex].cbCardCount,sizeof(BYTE)*2);
					CopyMemory(cbTableCardArray,HuAndTen[cbIndex].cbTableCardArray,sizeof(HuAndTen[cbIndex].cbTableCardArray));
					break;
				}
			default:ASSERT(FALSE); return false;
			}
		}
	}
	
	return true;
}