#ifndef TABLE_FRAME_SINK_HEAD_FILE
#define TABLE_FRAME_SINK_HEAD_FILE

#pragma once

#include "Stdafx.h"
#include "..\消息定义\CMD_CChess.h"
#include "GameLogic.h"

//////////////////////////////////////////////////////////////////////////
extern void TraceMessage(LPCTSTR pszMessage);

//游戏桌子类
class CTableFrameSink : public ITableFrameSink, public ITableUserAction
{
	//规则变量
protected:
	bool							m_bGameRule;						//规则标志
	WORD							m_wRuleRoundID;						//规则标识
	tagGameRuleInfo					m_GameRuleInfo;						//游戏规则
	BYTE							cccccccc1[255];

	//用户状态
protected:
	WORD							m_wBankerUser;						//庄家玩家
	WORD							m_wCurrentUser;						//当前用户
	WORD							m_wLeaveDrawTime[GAME_PLAYER];		//剩余局时
	BYTE							cccccccc2[255];

	//请求状态
protected:
	BYTE							m_cbConcludeReason;					//结束原因
	BYTE							m_cbPeaceCount[GAME_PLAYER];		//求和次数
	BYTE							cccccccc3[255];
	BYTE							m_cbRegretCount[GAME_PLAYER];		//悔棋次数
	BYTE							cccccccc4[255];
	BYTE							m_cbRequestStatus[GAME_PLAYER];		//请求状态
	BYTE							cccccccc5[255];

	//组件变量
protected:
	CGameLogic						m_GameLogic;						//游戏逻辑
	ITableFrame						* m_pITableFrame;					//框架接口
	tagGameServiceOption *			m_pGameServiceOption;				//游戏配置
	tagGameServiceAttrib *			m_pGameServiceAttrib;				//游戏属性
	//CGlobalUnits *                  m_pGlobalUnits;                     //全局单元

	//属性变量
protected:
	static const WORD				m_wPlayerCount;						//游戏人数
	static const BYTE				m_GameStartMode;					//开始模式

	//函数定义
public:
	//构造函数
	CTableFrameSink();
	//析构函数
	virtual ~CTableFrameSink();

	//基础接口
public:
	//释放对象
	virtual VOID  Release() { }
	//接口查询
	virtual VOID * QueryInterface(const IID & Guid, DWORD dwQueryVer);


	//管理接口
public:
	//初始化
	virtual bool Initialization(IUnknownEx * pIUnknownEx);
	//复位桌子
	virtual VOID RepositionSink();

	//信息接口
public:
	
	//游戏状态
	virtual bool  IsUserPlaying(WORD wChairID);

	//游戏事件
public:
	//游戏开始
	virtual bool OnEventGameStart();
	//游戏结束
	virtual bool OnEventGameConclude(WORD wChairID, IServerUserItem * pIServerUserItem, BYTE cbReason);
	//发送场景
	virtual bool OnEventSendGameScene(WORD wChairID, IServerUserItem * pIServerUserItem, BYTE cbGameStatus, bool bSendSecret);

	
	//事件接口
public:
	//定时器事件
	virtual bool OnTimerMessage(DWORD wTimerID, WPARAM wBindParam);
	//游戏消息处理
	virtual bool OnGameMessage(WORD wSubCmdID, VOID * pData, WORD wDataSize, IServerUserItem * pIServerUserItem);
	//框架消息处理
	virtual bool OnFrameMessage(WORD wSubCmdID, VOID * pData, WORD wDataSize, IServerUserItem * pIServerUserItem);
	//数据事件
	virtual bool OnGameDataBase(WORD wRequestID, VOID * pData, WORD wDataSize);


	//用户事件
public:
	//用户断线
	virtual bool OnActionUserOffLine(WORD wChairID,IServerUserItem * pIServerUserItem) { return true; }
	//用户重入
	virtual bool OnActionUserConnect(WORD wChairID,IServerUserItem * pIServerUserItem) { return true; }
	//用户坐下
	virtual bool OnActionUserSitDown(WORD wChairID,IServerUserItem * pIServerUserItem, bool bLookonUser);
	//用户起立
	virtual bool OnActionUserStandUp(WORD wChairID,IServerUserItem * pIServerUserItem, bool bLookonUser);
	//用户同意
	virtual bool OnActionUserOnReady(WORD wChairID,IServerUserItem * pIServerUserItem, VOID * pData, WORD wDataSize) ;
	//查询接口
public:
	//查询限额
	virtual SCORE QueryConsumeQuota(IServerUserItem * pIServerUserItem){return 0;}
	//最少积分
	virtual SCORE QueryLessEnterScore(WORD wChairID, IServerUserItem * pIServerUserItem){return 0;}
	//数据事件
	virtual bool OnDataBaseMessage(WORD wRequestID, VOID * pData, WORD wDataSize){return false;}
	//积分事件
	virtual bool OnUserScroeNotify(WORD wChairID, IServerUserItem * pIServerUserItem, BYTE cbReason){return false;}
	//查询是否扣服务费
	virtual bool QueryBuckleServiceCharge(WORD wChairID){return true;}

	//比赛接口
public:
	//设置基数
	virtual void SetGameBaseScore(LONG lBaseScore){};

	//游戏消息
protected:
	//移动棋子
	bool OnUserMoveChess(WORD wChairID, BYTE cbXSourcePos, BYTE cbYSourcePos, BYTE cbXTargetPos, BYTE cbYTargetPos, WORD wUserTimeCount);
	//和棋请求
	bool OnUserPeaceRequest(WORD wChairID);
	//和棋回应
	bool OnUserPeaceRespond(WORD wChairID, BYTE cbApprove);
	//悔棋请求
	bool OnUserRegretRequest(WORD wChairID);
	//悔棋回应
	bool OnUserRegretRespond(WORD wChairID, BYTE cbApprove);
	//结束请求
	bool OnUserConcludeRequest(WORD wChairID, BYTE cbReason);

	//辅助函数
protected:
	//积分计算
	bool CalculateGameScore(WORD wWinnerUser, LONGLONG lGameScore[GAME_PLAYER]);
};

//////////////////////////////////////////////////////////////////////////

#endif
